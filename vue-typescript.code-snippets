{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Script with Typescript By Max": {
		"scope": "vue",
		"prefix": ["script"],
		"body": [
			"<script lang=\"ts\">",
			"import { Component, Vue } from 'vue-property-decorator';",
			"",
			"@Component",
			"export default class ${1:ClassName} extends Vue {",
			"\tconstructor(){",
			"\t\tsuper()",
			"\t}",
			"$0",
			"};",
			"</script>",
		],
		"description": ""
	},

	"Vue Dynamic Form ElementUI by Max": {
		"scope": "vue",
		"prefix": ["Form"],
		"body": [
			"<template>",
  		"\t<div class=\"app-container\">",
    	"\t\t<el-form ref=\"form\" label-width=\"120px\" :rules=\"rules\">",
      "\t\t\t<el-form-item v-for=\"(item, index) in formItems\" :key=\"index\" :label=\"item.label\">",
      "\t\t\t\t<el-input v-model=\"formModel[item.modelProperty]\" placeholder=\"\"></el-input>",
			"\t\t\t</el-form-item>",
			"\t\t\t<el-form-item>",
      "\t\t\t\t<el-button type=\"primary\" @click=\"onSubmit\">创建</el-button>",
      "\t\t\t\t<el-button @click=\"onCancel\">取消</el-button>",
      "\t\t\t</el-form-item>",
    	"\t\t</el-form>",
  		"\t</div>",
			"</template>",
			"<script lang=\"ts\">",
			"import { Component, Vue, Prop } from 'vue-property-decorator';",
			"interface FormItem {",
			"\tlabel: string",
			"\tprop: string",
			"\tmodelProperty: string",
			"\t}",
			"@Component",
			"export default class Form extends Vue {",
  		"\tprivate formItems: FormItem[] = [];",
			"\tprivate formModel = {}",
			"\tprivate edit !: boolean;",
			"\tprivate rules = {",
			"\r",
			"}",
			"\r",
  		"\tconstructor(){",
    	"\t\tsuper()",
			"\r",
    	"\t\tthis.formItems = [",
    	"\t\t] as FormItem[];",
			"\r",
    	"\t\tthis.formModel = {",
			"\t\t}",
			"\t}",
			"\tprivate onSubmit(){",
			"\t\t//@ts-ignore",
			"\t\tthis.$$refs[\"form\"].validate((valid) => {",
			"\t\t\tif(valid) {",
			"\t\t\t\tif (!this.edit){",
			"\r",
			"\t\t\t\t}",
			"\t\t\t\telse {",
			"\r",
			"\t\t\t\t}",
			"\t\t\t} else {",
			"\t\t\t\treturn false;",
			"\t\t\t}",
			"\t\t});",
			"\t}",
			"};",
			"</script>",
		]
	},
	"Vue Dynamic Table ElementUI by Max": {
		"scope": "vue",
		"prefix": ["Table"],
		"body": [
			"<template>",
			"\t<div class=\"app-container\">",
			"\t\t<el-table class=\"table\" :data=\"model\" @row-click=\"onRowClick\">",
			"\t\t\t<el-table-column align=\"center\" label=\"#\" width=\"95\"",
			"\t\t\t\t>",
			"\t\t\t\t<template slot-scope=\"scope\">",
			"\t\t\t\t\t{{ scope.$$index }}",
			"\t\t\t\t</template>",
			"\t\t\t</el-table-column>",
			"\t\t\t<el-table-column v-for=\"(item, index) in columnItems\" :key=\"index\" :label=\"item.columnLabel\">",
			"\t\t\t\t<template slot-scope=\"scope\">",
			"\t\t\t\t\t{{ scope.row[item.modelProperty] }}",
			"\t\t\t\t</template>",
			"\t\t\t</el-table-column>",
			"\t\t</el-table>",
			"\t\t<el-pagination",
			"\t\t\tlayout=\"prev, pager, next\"",
			"\t\t\t:total=\"total\">",
			"\t\t</el-pagination>",
			"\t</div>",
			"</template>",
			"<script lang=\"ts\">",
			"import { Component, Vue } from 'vue-property-decorator';",
			"import {\t } from '@/api/index';",
			"import { Row } from 'element-ui';",
			"",
			"interface ColumnItem {",
			"\tcolumnLabel: string,",
			"\tmodelProperty: string,",
			"}",
			"",
			"let api = new $1Api()",
			"",
			"@Component",
			"export default class $1List extends Vue {",
			"\tprivate model: [] = []",
			"\tprivate maxPerPage: number = 15;",
			"\tprivate total: number = 0;",
			"\tprivate filter: $1FilterObj = {}",
			"\tprivate sort = []",
			"\tprivate order = []",
			"\tprivate columnItems: ColumnItem[] = [",
			"\t\t{",
			"\t\t\tcolumnLabel: \"序列号\",",
			"\t\t\tmodelProperty: \"serial\"",
			"\t\t}",
			"\t]",
			"",
			"\tprivate created() {",
			"\t\tthis.fetchData(1); ",
			"\t}",
			"",
			"\tprivate fetchData(page: number){",
			"\t\tapi.list$1(this.maxPerPage, page, this.filter, this.sort, this.order )",
			"\t\t.then(response => {",
			"\t\t\tthis.total = parseInt(response.headers['x-total-count']);",
			"\t\t\tthis.model = response.data;",
			"\t\t}).catch(error => {",
			"",
			"\t\t}).finally(() => {",
			"",
			"\t\t})",
			"\t}",
			"",
			"\t//@ts-ignore",
			"\tprivate onRowClick(row, column, event){",
			"\t\tconsole.log(row, column, event)",
			"\t\tthis.$$router.push('/$1/detail/'+ row.id);",
			"\t}",
			"};",
			"</script>",
			"<style lang=\"scss\">",
			".el-pagination {",
			"\ttext-align: center",
			"}",
			"",
			".table {",
			"\t.el-table__row {",
			"\t\tcursor: pointer;",
			"\t}",
			"}",
			"</style>",
		]
	}
}