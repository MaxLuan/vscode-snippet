{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Script with Typescript By Max": {
		"scope": "vue",
		"prefix": ["script"],
		"body": [
			"<script lang=\"ts\">",
			"import { Component, Vue } from 'vue-property-decorator';",
			"",
			"@Component",
			"export default class ${1:ClassName} extends Vue {",
			"\tconstructor(){",
			"\t\tsuper()",
			"\t}",
			"$0",
			"};",
			"</script>",
		],
		"description": ""
	},

	"Vue Dynamic Form ElementUI by Max": {
		"scope": "vue",
		"prefix": ["Form"],
		"body": [
			"<template>",
  		"\t<div class=\"app-container\">",
    	"\t\t<el-form ref=\"form\" label-width=\"120px\" :rules=\"rules\">",
      "\t\t\t<el-form-item v-for=\"(item, index) in formItems\" :key=\"index\" :label=\"item.label\">",
      "\t\t\t\t<el-input v-model=\"formModel[item.modelProperty]\" placeholder=\"\"></el-input>",
			"\t\t\t</el-form-item>",
			"\t\t\t<el-form-item>",
      "\t\t\t\t<el-button type=\"primary\" @click=\"onSubmit\">创建</el-button>",
      "\t\t\t\t<el-button @click=\"onCancel\">取消</el-button>",
      "\t\t\t</el-form-item>",
    	"\t\t</el-form>",
  		"\t</div>",
			"</template>",
			"<script lang=\"ts\">",
			"import { Component, Vue, Prop } from 'vue-property-decorator';",
			"interface FormItem {",
			"\tlabel: string",
			"\tprop: string",
			"\tmodelProperty: string",
			"\t}",
			"@Component",
			"export default class Form extends Vue {",
  		"\t@Prop()",
  		"\tprivate formItems: FormItem[] = [];",
  		"\t@Prop()",
			"\tprivate formModel = {}",
			"\t@Prop({ default: false })",
			"\tprivate edit !: boolean;",
			"\tprivate rules = {",
			"\r",
			"}",
			"\r",
  		"\tconstructor(){",
    	"\t\tsuper()",
			"\r",
    	"\t\tthis.formItems = [",
    	"\t\t] as FormItem[];",
			"\r",
    	"\t\tthis.formModel = {",
			"\t\t}",
			"\t}",
			"\tprivate OnSubmit(){",
			"\t\t//@ts-ignore",
			"\t\tthis.$refs[\"form\"].validate((valid) => {",
			"\t\t\tif(valid) {",
			"\t\t\t\tif (!this.edit){",
			"\r",
			"\t\t\t\t}",
			"\t\t\t\telse {",
			"\r",
			"\t\t\t\t}",
			"\t\t\t} else {",
			"\t\t\t\treturn false;",
			"\t\t\t}",
			"\t\t});",
			"\t}",
			"};",
			"</script>",
		]
	}
}